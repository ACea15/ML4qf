#+TITLE: Portfolio Construction using Black-Litterman Model and Factors
#+AUTHOR: Alvaro Cea
#+PROPERTY: header-args :tangle ./main.py :mkdirp yes
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{mathtools}

#+begin_comment
#+OPTIONS: toc:nil
#+LATEX_HEADER: \let\oldsection\section
#+LATEX_HEADER: \renewcommand{\section}{\clearpage\oldsection}
#+LATEX_HEADER: \let\oldsubsection\subsection
#+LATEX_HEADER: \renewcommand{\subsection}{\clearpage\oldsubsection}
#+end_comment

* House keeping :noexport:
#+begin_src elisp :results none :exports none
  (add-to-list 'org-structure-template-alist
  '("sp" . "src python :session py1"))
  (add-to-list 'org-structure-template-alist
  '("se" . "src elisp"))

  (setq org-confirm-babel-evaluate nil)
  (pyvenv-workon "ml4qf")
  (require 'org-tempo)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-latex-pdf-process (list "latexmk -f -synctex=1 -pdf %f"))
  ;; (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))

#+end_src

#+begin_src python :session py1 :tangle yes :results none :exports none
  import pandas as pd
  import numpy as np
  import yfinance as yf
  import statsmodels.api as sm
  import getFamaFrenchFactors as gff
  import pathlib
  import datetime
  import importlib
  import ml4qf
  import ml4qf.collectors.financial_features as financial_features
  import ml4qf.collectors.financial_factors as financial_factors
  import ml4qf.collectors.financial_markets as financial_markets
  from ml4qf.predictors.model_stats import regression_OLS
  import ml4qf.predictors.model_stats as model_stats
  import ml4qf.portfolios.blacklitterman as bl
  from tabulate import tabulate
  import plotly.express as px
  import plotly.graph_objects as go
  import matplotlib.pyplot as plt
  from pandas.plotting import autocorrelation_plot
  import config
  importlib.reload(config)
  img_dir = pathlib.Path("./img/")
  #img_dir = img_dir0.absolute()
  img_dir.mkdir(parents=True, exist_ok=True)
#+end_src

* Introduction
** Implemented computational tools and external libraries
- getFamaFrenchFactors
  gets data for fame french factors from the Kenneth French library
  https://pypi.org/project/getFamaFrenchFactors/
** Specifications:
For risk-free rate, 3M US Treasury from pandas FRED dataset/ECB website
rates for EUR/some small constant rate/zero rate – all are acceptable.
Use 2-3 year sample, which means > 500 daily returns.
** Index selection
The S&P 500 is considered a better reflection of the market’s performance across all sectors compared to the Nasdaq Composite and the Dow

#+begin_comment
#+CAPTION: Modal shape 1 
#+ATTR_LATEX: :width 0.75\textwidth
#+ATTR_ORG: :width 100
[[./img/polimi-M0.png]]
#+end_comment

* Theory
** Fama-French factors

It is one of the multi-factor models which is widely used in both academia and industry to estimate the excess return of an investment asset. It is an extension to Capital Asset Pricing Model (CAPM) by adding two additional factors apart from the market risk when estimating the excess returns of an asset. The three factors considered in this model are:

    Market factor (MKT) — Excess market return
    Size factor (SMB) — Excess return with a small market cap over those with a large market cap
    Value factor (HML) — Excess return of value stocks over growth stocks.

The Fama-French model is widely known as a stock market benchmark to evaluate investment performance.

$$
E[r_a] = \mu_a + \beta E[r_f]  + \epsilon_a
$$

$$
Var[r_a] = \mu_a + \beta r_f  + \epsilon_a
$$

$$
\Pi = w_a^{\top} r_a
$$

$$
Var(\Pi) = Var(r_a^{\top} w_a) = Var(r_a^{\top} w_a)
$$

** ARIMA model for time series
AutoRegressive Integrated Moving Average (ARIMA) statistical models are used 
AR: Autoregression. A model that uses the dependent relationship between an observation and some number of lagged observations.
I: Integrated. The use of differencing of raw observations (e.g. subtracting an observation from an observation at the previous time step) in order to make the time series stationary.
MA: Moving Average. A model that uses the dependency between an observation and a residual error from a moving average model applied to lagged observations.

Each of these components are explicitly specified in the model as a parameter. A standard notation is used of ARIMA(p,d,q) where the parameters are substituted with integer values to quickly indicate the specific ARIMA model being used.

The parameters of the ARIMA model are defined as follows:

- p: Number of lags in the observations that included in the model.
- d: Number of times differencing is applied to the observations.
- q: Size of moving average window.

** Black-Litterman model

$$
\mu_{eq} = \lambda \Sigma w_{mkt}
$$

- $\mu_{eq}$ is the Implied Excess Equilibrium Return Vector 
- $\lambda$ is the risk aversion coefficient, \lambda = \frac{E(\mu) - \mu_r}{\sigma^2}$
- $\Sigma$ is the covariance matrix of excess returns
- $w_{mkt}$ are market capitalization weights

$$
E[\mu_{bl}] = \left[(\tau \Sigma)^{-1} + P'\Omega^{-1}P\right]^{-1} \left[(\tau \Sigma)^{-1}\mu_{eq} + P'\Omega^{-1}Q\right]  
$$

- $E[\mu_{bl}]$: Posterior combined return vector ($N\times a$)
- $\tau$: error in views
- $P$: Matrix identifying assets involved in the views ($K\times N$)
- $Q$: View vector ($K\times 1$)
- $\Omega$: Diagonal covariance matrix with the errors expressed in the views ($N\times N$). 

Normal distributions:

- Prior equilibrium distribution: $N(\mu_{eq}, \tau \Sigma)$
- Views distribution: $N(Q, \Omega)$
- New combined return distribution: $N\left(E[\mu_{bl}], \left[(\tau \Sigma)^{-1} + P'\Omega^{-1}P\right]^{-1} \right)$
  
** Optimisation

- Minimise Mean variance
- Maximize Sharpe ratio
- Hierarchical Risk Parity (HRP)   

* Results
** Portfolio and Factor analysis
:PROPERTIES:
:header-args: :session py1 :tangle yes :comments org
:END:

*** Asset selection
#+begin_src python  :results none
  tickers_sp500 = ml4qf.collectors.scrap_tickers_index(config.index_weblist)
  df_tickers_sp500 = ml4qf.collectors.get_tickers_info(tickers_sp500,
                                                   config.info_sp500,
                                                   data_folder="./data",
                                                   name_family="sp500")
  df_tickers_sp500.dropna(inplace=True)
  df_tickers_filtered = ml4qf.utils.date_filter_lower(df_tickers_sp500,
                                                'first_date',
                                                date_lower=config.start_date_assets)
  df_tickers_filtered =  df_tickers_filtered.sort_values('marketCap',ascending=False)
  df_selected_tickers = ml4qf.collectors.select_assets(df_tickers_filtered,
                                                       config.ASSET_SELECTION_PCT,
                                                       config.ASSET_SELECTION_NAMES)
  # #FinancialDataContainer
  w_mkt = df_selected_tickers.marketCap / df_selected_tickers.marketCap.sum()
#+end_src

#+NAME: Market cap equilibrium weights
#+begin_src python :results output
  portfolios_path = pathlib.Path("./data/portfolios/")
  portfolios_path.mkdir(parents=True, exist_ok=True)
  portfolios_file = portfolios_path / ("_".join(df_selected_tickers.index))
  if not portfolios_file.is_file():
      df_selected_tickers.to_csv(portfolios_file)
  print(w_mkt)
  #w_mkt = w_mkt.to_numpy()
#+end_src

#+RESULTS: Market cap equilibrium weights
#+begin_example
KO      0.430949
LOW     0.211659
GS      0.185425
ALGN    0.043380
FICO    0.035078
DOV     0.032496
ATO     0.027659
ESS     0.026347
DXC     0.007006
Name: marketCap, dtype: float64
#+end_example

#+RESULTS:
#+begin_example
KO      0.430949
LOW     0.211659
GS      0.185425
ALGN    0.043380
FICO    0.035078
DOV     0.032496
ATO     0.027659
ESS     0.026347
DXC     0.007006
Name: marketCap, dtype: float64
#+end_example

*** Assets exploratory analysis
#+begin_src python  :results none
  fdc = financial_features.FinancialDataContainer(df_selected_tickers.index,
                                                  config.start_date_assets,
                                                  config.end_date_assets,
                                                  '1mo',
                                                  './data')
  df_assets = fdc.df.dropna()
  df_assets_train, df_assets_test = ml4qf.utils.split_df_date(df_assets,
                                                   split_index=config.split_data_idx)
  asset_names = list(df_assets.columns)
#+end_src

#+NAME: df_assets
#+begin_src python :session py1 :results raw :exports results
  tabulate(df_assets.iloc[:10],
           headers=asset_names,
           showindex=True,
           tablefmt='orgtbl')
#+end_src

#+ATTR_LATEX: :width 0.7\textwidth :environment longtable :caption  
#+RESULTS: df_assets
|                     |       AMZN |         LIN |       CDNS |        ACGL |        ALGN |        MKC |        EQT |         AOS |        PNW |
|---------------------+------------+-------------+------------+-------------+-------------+------------+------------+-------------+------------|
| 2011-02-01 00:00:00 |  0.0215161 |   0.0681427 |   0.146313 |   0.0254957 | 0.000960176 |  0.0780543 |  0.0230338 |  -0.0562953 |  0.0373373 |
| 2011-03-01 00:00:00 |  0.0394714 |   0.0223385 | -0.0201005 |    0.096022 |  -0.0177458 | 0.00377755 |  0.0121704 |   0.0975247 |  0.0132607 |
| 2011-04-01 00:00:00 |  0.0870482 |   0.0474409 |  0.0646154 |   0.0484929 |    0.178711 |  0.0269705 |   0.054509 | -0.00834459 |  0.0140219 |
| 2011-05-01 00:00:00 | 0.00449422 | -0.00545012 |  0.0298651 |  -0.0270193 |    0.014913 |  0.0217834 |  0.0296465 |  -0.0568569 |  0.0430975 |
| 2011-06-01 00:00:00 |  0.0396562 |    0.024093 | -0.0121608 |  -0.0536614 |  -0.0693878 |  -0.012353 | -0.0306386 |   0.0200144 | -0.0150242 |
| 2011-07-01 00:00:00 |  0.0881706 |  -0.0438232 | -0.0217803 |   0.0588973 |  -0.0355263 | -0.0185596 |   0.208682 |  -0.0196217 | -0.0500225 |
| 2011-08-01 00:00:00 | -0.0327611 |  -0.0496913 |  -0.105518 | -0.00355029 |   -0.131423 | -0.0176773 | -0.0576559 |  -0.0525681 |  0.0446282 |
| 2011-09-01 00:00:00 | 0.00464612 |  -0.0508681 |          0 |  -0.0296913 |   -0.205759 | -0.0341076 |  -0.107991 |    -0.18478 | -0.0293852 |
| 2011-10-01 00:00:00 | -0.0125792 |   0.0876123 |   0.198052 |    0.100673 |    0.518128 |  0.0519931 |    0.19003 |    0.160162 |  0.0614812 |
| 2011-11-01 00:00:00 | -0.0993864 |  0.00324581 | -0.0117435 |   0.0500417 |   0.0638298 | 0.00288302 | -0.0234646 |   0.0565123 |  0.0401491 |



#+NAME: basket_returns
#+begin_src python :results value file  :exports results :var name=(org-element-property :name (org-element-context))
  fig1_path= img_dir / f'{name}.png'
  fig1 = px.line(df_assets, y=df_assets.keys())
  fig1.write_image(fig1_path)
  fig1_path
#+end_src

#+CAPTION:  Asset's basket returns
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: basket_returns
[[file:./img/basket_returns.png]]

#+NAME: AssetsCorrelation
#+begin_src python :results value file  :exports results :var name=(org-element-property :name (org-element-context))
  fig1_path= img_dir / f'{name}.png'
  df_corr = df_assets.corr().round(2)
  fig1 = px.imshow(np.abs(df_corr))
  fig1.layout.height = 600
  fig1.layout.width = 600
  fig1.write_image(fig1_path)
  fig1_path
#+end_src

#+CAPTION: Assets correlation
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: AssetsCorrelation
[[file:img/AssetsCorrelation.png]]

*** Factor collection
#+begin_src python :tangle yes :results none
  factor_names = financial_factors.get_factor_names(config.FACTORS)  
  df_factors0 = financial_factors.get_factors(config.FACTORS.keys(), 'm')
  df_factors =  ml4qf.utils.trim_df_date(df_factors0, start_date=config.start_date_factors,
                                         end_date=config.end_date_factors)
  df_factors_train, df_factors_test = ml4qf.utils.split_df_date(df_factors,
                                          split_index=config.split_data_idx)
#+end_src

#+NAME: factors_plot
#+begin_src python :results value file  :exports results :var name=(org-element-property :name (org-element-context))
  fig1_path= img_dir / f'{name}.png'
  fig1 = px.line(df_factors, y=factor_names)
  fig1.write_image(fig1_path)
  fig1_path
#+end_src

#+CAPTION: Factors evolution
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: factors_plot
[[file:img/factors_plot.png]]


#+NAME: RF_plot
#+begin_src python :results value file  :exports results :var name=(org-element-property :name (org-element-context))
  fig1_path= img_dir / f'{name}.png'
  fig1 = px.line(df_factors, y='RF')
  fig1.write_image(fig1_path)
  fig1_path
#+end_src

#+CAPTION: Risk free rate evolution
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: RF_plot
[[file:img/RF_plot.png]]
*** Factor regression
#+begin_src python :results none
  factor_models = financial_factors.factors_regression(factor_names,
                                                      df_factors_train,
                                                      df_assets_train,
                                                      regression_kernel=regression_OLS)
  alpha, beta = financial_factors.compute_factors_coeff(factor_models)
  factor_model = financial_factors.factor_lin_generator(alpha, beta)
#+end_src

#+NAME: df_train_factors
#+begin_src python  :results raw :exports results
  albe = np.vstack([alpha, beta]).T
  df_index = asset_names
  df_columns = ['alpha'] + factor_names
  df_train_factors = pd.DataFrame(albe, columns=df_columns, index=df_index)
  tabulate(df_train_factors, headers=df_columns, showindex=True, tablefmt='orgtbl')
#+end_src

#+RESULTS: df_train_factors
|      |       alpha |   Mkt-RF |        SMB |        HML |       RMW |       CMA |       MOM |
|------+-------------+----------+------------+------------+-----------+-----------+-----------|
| KO   | -0.00504705 | 0.715481 |  -0.606405 |   0.253916 |  0.673695 |  0.232055 |  0.255632 |
| LOW  |  0.00256421 |  1.35459 |   0.424878 |  -0.444549 |  0.163616 |  0.367605 |  0.183704 |
| GS   | -0.00171691 |  1.26161 |  -0.367694 |    1.10773 |  -1.08038 | -0.779736 |  -0.30657 |
| ALGN |  0.00812828 |  1.85869 |   0.855478 |  -0.346435 |  0.665934 |  -1.37539 |  0.300928 |
| FICO |    0.010519 |  1.33782 |   0.491586 |  -0.447025 |  0.409309 | -0.132692 |  0.381129 |
| DOV  | -0.00119858 |   1.2466 |  0.0759657 |  0.0106195 | 0.0359513 |  0.206847 |  -0.35993 |
| ATO  |  0.00370247 | 0.532019 | -0.0095945 | -0.0506821 |  0.474951 |  0.772017 |  0.462068 |
| ESS  | 0.000448892 | 0.597641 |   0.218558 |   0.449575 |  0.268346 | -0.688924 |  0.337749 |
| DXC  | -0.00824096 |  1.75237 |  -0.341453 |   0.862479 | -0.423773 |  -1.65855 | -0.341152 |



#+begin_src python :results output :exports results
  print(factor_models[df_assets.keys()[2]].summary())
#+end_src

#+RESULTS:
#+begin_example
                            OLS Regression Results                            
==============================================================================
Dep. Variable:                      y   R-squared:                       0.703
Model:                            OLS   Adj. R-squared:                  0.686
Method:                 Least Squares   F-statistic:                     41.78
Date:                Fri, 11 Aug 2023   Prob (F-statistic):           8.75e-26
Time:                        22:46:24   Log-Likelihood:                 191.62
No. Observations:                 113   AIC:                            -369.2
Df Residuals:                     106   BIC:                            -350.1
Df Model:                           6                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const         -0.0017      0.005     -0.367      0.714      -0.011       0.008
x1             1.2616      0.129      9.791      0.000       1.006       1.517
x2            -0.3677      0.222     -1.656      0.101      -0.808       0.072
x3             1.1077      0.228      4.850      0.000       0.655       1.561
x4            -1.0804      0.312     -3.466      0.001      -1.698      -0.462
x5            -0.7797      0.365     -2.136      0.035      -1.504      -0.056
x6            -0.3066      0.158     -1.943      0.055      -0.619       0.006
==============================================================================
Omnibus:                       10.163   Durbin-Watson:                   2.124
Prob(Omnibus):                  0.006   Jarque-Bera (JB):               23.665
Skew:                          -0.151   Prob(JB):                     7.26e-06
Kurtosis:                       5.222   Cond. No.                         91.5
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example


#+begin_src python :session py1 :results none :exports none
  import getFamaFrenchFactors as gff
  import yfinance as yf
  import statsmodels.api as sm

  ticker = 'amzn'
  start = '2016-8-31'
  end = '2021-8-31'
  start = '2014-12-31'
  end = '2019-12-31'
  stock_data = yf.download(ticker, start, end)

  ff3_monthly = gff.famaFrench3Factor(frequency='m')
  #ff3_monthly = gff.famaFrench5Factor(frequency='m')
  #momentum_monthly = gff.momentumFactor(frequency='m')

  ff3_monthly.rename(columns={"date_ff_factors": 'Date'}, inplace=True)
  ff3_monthly.set_index('Date', inplace=True)

  stock_returns = stock_data['Close'].resample('M').last().pct_change().dropna()
  stock_returns.name = "Month_Rtn"
  ff_data = ff3_monthly.merge(stock_returns,on='Date')

  X = ff_data[['Mkt-RF', 'SMB', 'HML']]
  y = ff_data['Month_Rtn'] - ff_data['RF']
  X = sm.add_constant(X)
  ff_model = sm.OLS(y, X).fit()
#+end_src
#+begin_src python :session py1 :results output :exports results
  print(ff_model.summary())
#+end_src

#+RESULTS:
#+begin_example
                            OLS Regression Results                            
==============================================================================
Dep. Variable:                      y   R-squared:                       0.514
Model:                            OLS   Adj. R-squared:                  0.488
Method:                 Least Squares   F-statistic:                     19.73
Date:                Thu, 10 Aug 2023   Prob (F-statistic):           7.48e-09
Time:                        15:40:50   Log-Likelihood:                 86.579
No. Observations:                  60   AIC:                            -165.2
Df Residuals:                      56   BIC:                            -156.8
Df Model:                           3                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const          0.0147      0.008      1.843      0.071      -0.001       0.031
Mkt-RF         1.5402      0.224      6.886      0.000       1.092       1.988
SMB           -0.6471      0.338     -1.914      0.061      -1.324       0.030
HML           -0.9529      0.297     -3.205      0.002      -1.549      -0.357
==============================================================================
Omnibus:                        2.723   Durbin-Watson:                   1.576
Prob(Omnibus):                  0.256   Jarque-Bera (JB):                2.361
Skew:                           0.485   Prob(JB):                        0.307
Kurtosis:                       2.949   Cond. No.                         46.3
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example


#+begin_src python :results none
  returns_pred = factor_model(df_factors_test[factor_names].to_numpy())
  df_returns_pred = pd.DataFrame(returns_pred,
                                 columns=asset_names,
                                 index=df_assets_test.index)
#+end_src

*** Factors backtesting
#+begin_comment
#+NAME: predicted_returns
#+begin_src python :var i_asset=0 name=(org-element-property :name (org-element-context))
  i_asset = i_asset
  i_name = asset_names[i_asset]
  fig1_path= img_dir / f'{name}{i_name}.png'
  fig1 = go.Figure()
  fig1.add_trace(go.Scatter(
      x=df_assets_test.index,
      y=df_assets_test.iloc[:, i_asset] - df_factors_test.RF.to_numpy(),
      mode='lines+markers',
      name=f"{i_name} real"))
  fig1.add_trace(go.Scatter(
      x=df_assets_test.index,
      y=df_returns_pred[i_name],
      mode='lines',
      name=f"{i_name} pred."))

  #px.line(df_returns_pred['GOOGL'], y=df_returns_pred.keys()[0])

  fig1.write_image(fig1_path)
  str(fig1_path)
#+end_src

#+NAME: predicted_returns0
#+begin_src python :noweb eval :results value file  :exports results
  fig_path = "<<predicted_returns(i_asset=0, name="predicted_returns_")>>"
  fig_path
#+end_src
#+CAPTION:  Backtesting factor approximation on Google asset
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: predicted_returns0
#+end_comment

#+begin_src python :results none
  def plot_rets_fromfactors(i_asset, name):

      i_name = asset_names[i_asset]
      fig1_path= img_dir / f'{name}{i_name}.png'
      fig1 = go.Figure()
      fig1.add_trace(go.Scatter(
          x=df_assets_test.index,
          y=df_assets_test.iloc[:, i_asset] - df_factors_test.RF.to_numpy(),
          mode='lines+markers',
          name=f"{i_name} real"))
      fig1.add_trace(go.Scatter(
          x=df_assets_test.index,
          y=df_returns_pred[i_name],
          mode='lines',
          name=f"{i_name} pred."))

      #px.line(df_returns_pred['GOOGL'], y=df_returns_pred.keys()[0])

      fig1.write_image(fig1_path)
      return str(fig1_path)

#+end_src

#+NAME: predicted_returns0
#+begin_src python :noweb eval :results value file  :exports results
  fig_path = predicted_returns(i_asset=0, name="predicted_returns_")
  fig_path
#+end_src
#+CAPTION:  Backtesting factor approaximation on Google asset
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: predicted_returns0
[[file:img/predicted_returns_WFC.png]]


#+NAME: predicted_returns1
#+begin_src python :noweb eval :results value file  :exports results
  fig_path = predicted_returns(i_asset=1, name="predicted_returns_")
  fig_path
#+end_src
#+CAPTION:  Backtesting factor approaximation on Google asset
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: predicted_returns1
[[file:img/predicted_returns_WFC.png]]

#+NAME: predicted_returns2
#+begin_src python :noweb eval :results value file  :exports results
  fig_path = predicted_returns(i_asset=2, name="predicted_returns_")
  fig_path
#+end_src
#+CAPTION:  Backtesting factor approaximation on Google asset
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: predicted_returns2
[[file:img/predicted_returns_GS.png]]

#+NAME: predicted_returns3
#+begin_src python :noweb eval :results value file  :exports results
  fig_path = predicted_returns(i_asset=3, name="predicted_returns_")
  fig_path
#+end_src
#+CAPTION:  Backtesting factor approaximation on Google asset
#+ATTR_LATEX: :width 0.75\textwidth 
#+RESULTS: predicted_returns3
[[file:img/predicted_returns_BKR.png]]

** Generation of asset views
:PROPERTIES:
:header-args: :session py1 :tangle yes :comments org
:END:
*** ARIMA model construction
#+NAME: arima_autocorrelation
#+begin_src python :results value file  :exports results :var name=(org-element-property :name (org-element-context))
  fig1_path= img_dir / f'{name}.png'
  fig = plt.figure()
  ax = autocorrelation_plot(df_train_factors['Mkt-RF'])
  #ax.set_title("bleh")
  #ax.set_xlabel("xlabel")
  #ax.plot(x, y, 'r--')
  fig.savefig(fig1_path)
  fig1_path
#+end_src

#+RESULTS: arima_autocorrelation
[[file:img/arima_autocorrelation.png]]

#+begin_src python :results none
  X = df_factors_train[factor_names].to_numpy()
  arima_train_models = model_stats.arima_fit(X, factor_names, (2,1,0))
#+end_src

#+begin_src python :results none
  arima_train_models['Mkt-RF'].summary()
#+end_src

*** ARIMA model prediction
#+begin_src python :results none
  Xtrain = df_factors_train[factor_names].to_numpy()
  Xtest = df_factors_test[factor_names].to_numpy()
  index_train = df_factors_train.index
  index_test = df_factors_test.index
  arima_train_models = model_stats.arima_fit(X, factor_names, (2,1,0))
#+end_src

#+begin_src python :results none
  df_arimatrain, df_arimatest = model_stats.arima_build_pred(arima_train_models,
                                                             Xtrain, Xtest,
                                                             factor_names,
                                                             index_train,
                                                             index_test)


#+end_src

** Black-Litterman based portfolio
:PROPERTIES:
:header-args: :session py1 :tangle yes :comments org
:END:

*** Prior and posterior returns construction

#+NAME: Calculate Covariance
#+begin_src python :results none
  df_Sigma = df_factors[factor_names].cov()
  df_Sigma_train = df_factors_train[factor_names].cov()
  df_Sigma_test = df_factors_test[factor_names].cov()
  Sigma = df_Sigma.to_numpy()
  Sigma_train = df_Sigma_train.to_numpy()
  Sigma_test = df_Sigma_test.to_numpy()
#+end_src

#+NAME: Black-Litterman initialisation
#+begin_src python :results none
  pf_trustee = bl.BlackLitterman(Sigma, w_mkt, config.lambda_mkt[0])
  pf_ = bl.BlackLitterman(Sigma, w_mkt, config.lambda_mkt[1])
  pf_trustee = bl.BlackLitterman(Sigma, w_mkt, config.lambda_mkt[2])
#+end_src

*** Covariance treatment
*** Portfolio weights optimisation
*** Analysis and discussion
*** Performance comparison
sss


#+LaTeX: \appendix
* Code execution
The codes herein have been tested in linux (Ubuntu 22 and Centos 8) and in MacOs


** Testing
